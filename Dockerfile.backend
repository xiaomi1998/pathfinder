# Pathfinder Backend Dockerfile
# 多阶段构建：构建阶段 + 生产阶段

# ====================
# 构建阶段
# ====================
FROM node:18-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl-dev

# 复制 package 文件
COPY package*.json ./
COPY prisma/ ./prisma/

# 安装所有依赖（包括开发依赖）
RUN npm ci

# 生成 Prisma 客户端
RUN npx prisma generate

# 复制源代码
COPY . .

# 构建应用
RUN npm run build

# ====================
# 生产阶段
# ====================
FROM node:18-alpine

# 安装生产环境必要工具
RUN apk add --no-cache \
    curl \
    dumb-init \
    tzdata

# 设置时区
ENV TZ=Asia/Shanghai

# 创建应用用户
RUN addgroup -g 1001 -S nodejs
RUN adduser -S pathfinder -u 1001

# 设置工作目录
WORKDIR /app

# 复制构建产物和依赖
COPY --from=builder --chown=pathfinder:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=pathfinder:nodejs /app/dist ./dist
COPY --from=builder --chown=pathfinder:nodejs /app/prisma ./prisma
COPY --from=builder --chown=pathfinder:nodejs /app/package*.json ./

# 创建必要目录
RUN mkdir -p /app/logs /app/uploads
RUN chown -R pathfinder:nodejs /app

# 切换到应用用户
USER pathfinder

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# 暴露端口
EXPOSE 3000

# 启动脚本
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/server.js"]