# Pathfinder Frontend Production Dockerfile
# 多阶段构建 + Nginx 优化 + 静态资源压缩

# ====================
# 构建阶段
# ====================
FROM node:18-alpine AS builder

# 设置构建参数
ARG VITE_API_BASE_URL
ARG VITE_APP_NAME=Pathfinder
ARG VITE_APP_VERSION
ARG BUILD_DATE
ARG GIT_COMMIT

# 安装构建工具
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++

# 设置工作目录
WORKDIR /app

# 复制 package 文件
COPY package*.json ./

# 安装依赖
RUN npm ci --no-audit --no-fund --only=production=false

# 复制源代码
COPY . .

# 设置构建环境变量
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_APP_NAME=${VITE_APP_NAME}
ENV VITE_APP_VERSION=${VITE_APP_VERSION}
ENV NODE_ENV=production

# 构建生产版本
RUN npm run build

# 静态资源优化
RUN find dist -type f -name "*.html" -exec gzip -9 -k {} \; && \
    find dist -type f -name "*.css" -exec gzip -9 -k {} \; && \
    find dist -type f -name "*.js" -exec gzip -9 -k {} \; && \
    find dist -type f -name "*.json" -exec gzip -9 -k {} \; && \
    find dist -type f -name "*.svg" -exec gzip -9 -k {} \;

# ====================
# 生产阶段
# ====================
FROM nginx:1.25-alpine

# 设置标签
LABEL maintainer="Pathfinder Team <team@pathfinder.com>" \
      org.opencontainers.image.title="Pathfinder Frontend" \
      org.opencontainers.image.description="Pathfinder Customer Journey Analytics Frontend" \
      org.opencontainers.image.version="${VITE_APP_VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${GIT_COMMIT}" \
      org.opencontainers.image.source="https://github.com/pathfinder/frontend"

# 安装必要的工具和安全更新
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    wget \
    tzdata \
    ca-certificates \
    brotli \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 创建 Nginx 配置
RUN mkdir -p /etc/nginx/conf.d

# 创建前端专用的 Nginx 配置
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
# Pathfinder Frontend Nginx Configuration
server {
    listen 80;
    server_name localhost;
    
    # 安全头
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 根目录
    root /usr/share/nginx/html;
    index index.html;
    
    # 启用 Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/atom+xml
        image/svg+xml;
    
    # 预压缩文件支持
    gzip_static on;
    
    # 静态资源缓存
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        
        # 尝试预压缩文件
        location ~* \.(js|css|json|svg)$ {
            gzip_static on;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # API 路由代理（如果需要）
    location /api/ {
        return 404;  # 由外部反向代理处理
    }
    
    # SPA 路由支持
    location / {
        try_files \$uri \$uri/ /index.html;
        
        # HTML 文件不缓存
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }
    }
    
    # 健康检查端点
    location /health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
    
    # 禁止访问隐藏文件
    location ~ /\\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 禁止访问备份文件
    location ~* \\.(bak|backup|swp|tmp)\$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
EOF

# 创建优化的 Nginx 主配置
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # 缓冲区设置
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # 包含虚拟主机配置
    include /etc/nginx/conf.d/*.conf;
}
EOF

# 创建必要目录
RUN mkdir -p /var/log/nginx /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp

# 设置权限
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /var/cache/nginx && \
    chmod -R 755 /usr/share/nginx/html

# 创建非特权用户的写入目录
RUN mkdir -p /tmp/nginx && chown -R nginx:nginx /tmp/nginx

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# 暴露端口
EXPOSE 80

# 启动 Nginx
CMD ["nginx", "-g", "daemon off;"]

# 安全标签
LABEL security.scan="true" \
      security.non-root-user="false" \
      security.readonly-rootfs="false"