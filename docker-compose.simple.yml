version: '3.8'

services:
  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: pathfinder-postgres
    environment:
      POSTGRES_DB: pathfinder
      POSTGRES_USER: pathfinder_user
      POSTGRES_PASSWORD: pathfinder_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pathfinder_user -d pathfinder"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: pathfinder-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 后端Node.js服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: pathfinder-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://pathfinder_user:pathfinder_password@postgres:5432/pathfinder
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # 前端Vue.js服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: pathfinder-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:3000/api
      VITE_APP_TITLE: Pathfinder
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: pathfinder-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites/pathfinder.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/error-pages:/usr/share/nginx/html/error-pages:ro
    depends_on:
      - frontend
      - backend
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# 数据卷配置
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

# 网络配置
networks:
  pathfinder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16