version: '3.8'

# Pathfinder 生产环境 Docker Compose 配置
# 包含完整的负载均衡、SSL 终端、监控和日志收集

services:
  # ==========================================
  # PostgreSQL 数据库集群
  # ==========================================
  postgres-primary:
    image: postgres:15-alpine
    container_name: pathfinder-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pathfinder_db}
      POSTGRES_USER: ${POSTGRES_USER:-pathfinder_app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./database/init-indexes.sql:/docker-entrypoint-initdb.d/02_indexes.sql
      - ./database/init-constraints.sql:/docker-entrypoint-initdb.d/03_constraints.sql
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./backups:/var/backups
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "127.0.0.1:5432:5432"  # 仅本地访问
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pathfinder_app} -d ${POSTGRES_DB:-pathfinder_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - pathfinder-backend
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=postgres,environment=production"

  # ==========================================
  # Redis 缓存集群
  # ==========================================
  redis-master:
    image: redis:7-alpine
    container_name: pathfinder-redis-master
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
    volumes:
      - redis_master_data:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "127.0.0.1:6379:6379"  # 仅本地访问
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - pathfinder-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=redis,environment=production"

  # ==========================================
  # 后端 API 服务集群
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    image: pathfinder-backend:${VERSION:-latest}
    container_name: pathfinder-backend-${INSTANCE_ID:-1}
    restart: unless-stopped
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: ${INSTANCE_ID:-1}
      DATABASE_URL: postgresql://${POSTGRES_USER:-pathfinder_app}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB:-pathfinder_db}?schema=public&sslmode=require
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      AI_API_KEY: ${AI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # 性能和安全配置
      NODE_OPTIONS: "--max-old-space-size=1024 --optimize-for-size"
      UV_THREADPOOL_SIZE: 128
      # 监控配置
      PROMETHEUS_ENABLED: "true"
      PROMETHEUS_PORT: 9090
      HEALTH_CHECK_ENABLED: "true"
    volumes:
      - ./logs/backend:/app/logs
      - ./uploads:/app/uploads
      - backend_cache:/tmp
    expose:
      - "3000"
      - "9090"  # Prometheus metrics
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - pathfinder-backend
      - pathfinder-frontend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=backend,environment=production"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev

  # ==========================================
  # 前端 Web 服务
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_BASE_URL: ${API_BASE_URL}
        VITE_APP_NAME: ${APP_NAME:-Pathfinder}
        VITE_APP_VERSION: ${VERSION:-1.0.0}
    image: pathfinder-frontend:${VERSION:-latest}
    container_name: pathfinder-frontend-${INSTANCE_ID:-1}
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./logs/frontend:/var/log/nginx
      - frontend_cache:/var/cache/nginx
    expose:
      - "80"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pathfinder-frontend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=frontend,environment=production"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=100M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev

  # ==========================================
  # Nginx 负载均衡和 SSL 终端
  # ==========================================
  nginx:
    image: nginx:1.25-alpine
    container_name: pathfinder-nginx-proxy
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-prod:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - nginx_cache:/var/cache/nginx
      - ./nginx/error-pages:/var/www/error-pages:ro
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 4096
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pathfinder-frontend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.3'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=nginx,environment=production"
    security_opt:
      - no-new-privileges:true

  # ==========================================
  # SSL 证书管理
  # ==========================================
  certbot:
    image: certbot/certbot:latest
    container_name: pathfinder-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - ./logs/certbot:/var/log/letsencrypt
    environment:
      - CERTBOT_EMAIL=${SSL_EMAIL}
    command: >
      sh -c 'trap exit TERM; while :; do
        certbot renew --quiet --webroot --webroot-path=/var/www/certbot --post-hook "docker kill --signal=HUP pathfinder-nginx-proxy" || true;
        sleep 12h & wait $${!};
      done;'
    networks:
      - pathfinder-frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # ==========================================
  # 监控系统
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pathfinder-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    ports:
      - "127.0.0.1:9090:9090"  # 仅本地访问
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules:/etc/prometheus/alert_rules:ro
      - prometheus_data:/prometheus
    networks:
      - pathfinder-monitoring
      - pathfinder-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: pathfinder-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
    ports:
      - "127.0.0.1:3001:3000"  # 仅本地访问
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - pathfinder-monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================
  # 日志收集系统 (可选)
  # ==========================================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: pathfinder-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/pathfinder:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-http://elasticsearch:9200}
    networks:
      - pathfinder-monitoring
    profiles:
      - logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================
  # 备份服务
  # ==========================================
  backup:
    image: postgres:15-alpine
    container_name: pathfinder-backup
    restart: "no"
    depends_on:
      - postgres-primary
    volumes:
      - ./backups:/backups
      - ./scripts/backup-database.sh:/backup.sh:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pathfinder_db}
      POSTGRES_USER: ${POSTGRES_USER:-pathfinder_app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres-primary
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do sleep 24h; /backup.sh; done"]
    networks:
      - pathfinder-backend
    profiles:
      - backup
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

# ==========================================
# 网络配置
# ==========================================
networks:
  pathfinder-frontend:
    driver: bridge
    name: pathfinder-frontend
    ipam:
      config:
        - subnet: 172.20.1.0/24
    driver_opts:
      com.docker.network.bridge.name: pathfinder-frontend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  pathfinder-backend:
    driver: bridge
    name: pathfinder-backend
    internal: true  # 内部网络，增强安全性
    ipam:
      config:
        - subnet: 172.20.2.0/24
    driver_opts:
      com.docker.network.bridge.name: pathfinder-backend

  pathfinder-monitoring:
    driver: bridge
    name: pathfinder-monitoring
    internal: true
    ipam:
      config:
        - subnet: 172.20.3.0/24

# ==========================================
# 数据卷配置
# ==========================================
volumes:
  # 数据库存储
  postgres_primary_data:
    driver: local
    name: pathfinder-postgres-primary-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/pathfinder}/postgres

  # 缓存存储
  redis_master_data:
    driver: local
    name: pathfinder-redis-master-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/pathfinder}/redis

  # 监控数据
  prometheus_data:
    driver: local
    name: pathfinder-prometheus-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/pathfinder}/prometheus

  grafana_data:
    driver: local
    name: pathfinder-grafana-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/pathfinder}/grafana

  # SSL 证书
  certbot_certs:
    driver: local
    name: pathfinder-certbot-certs

  certbot_www:
    driver: local
    name: pathfinder-certbot-www

  # 缓存卷
  nginx_cache:
    driver: local
    name: pathfinder-nginx-cache

  frontend_cache:
    driver: local
    name: pathfinder-frontend-cache

  backend_cache:
    driver: local
    name: pathfinder-backend-cache

# ==========================================
# Secrets (Docker Swarm 支持)
# ==========================================
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  grafana_password:
    external: true

# ==========================================
# 配置 (Docker Swarm 支持)
# ==========================================
configs:
  nginx_config:
    file: ./nginx/nginx.prod.conf
  prometheus_config:
    file: ./monitoring/prometheus.yml