version: '3.8'

services:
  # ==========================================
  # PostgreSQL 数据库
  # ==========================================
  postgres:
    image: postgres:14-alpine
    container_name: pathfinder-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pathfinder_db
      POSTGRES_USER: pathfinder_app
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_database.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./database_maintenance.sql:/docker-entrypoint-initdb.d/02_maintenance.sql
      - ./postgres.conf:/etc/postgresql/postgresql.conf
      - ./backups:/var/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pathfinder_app -d pathfinder_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - pathfinder-network

  # ==========================================
  # Redis 缓存
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: pathfinder-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    networks:
      - pathfinder-network

  # ==========================================
  # 后端 API 服务
  # ==========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: pathfinder-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://pathfinder_app:${POSTGRES_PASSWORD}@postgres:5432/pathfinder_db?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      AI_API_KEY: ${AI_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pathfinder-network

  # ==========================================
  # 前端 Web 服务
  # ==========================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: pathfinder-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NGINX_PORT: 80
      API_BASE_URL: ${API_BASE_URL}
    volumes:
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pathfinder-network

  # ==========================================
  # Nginx 反向代理（生产环境）
  # ==========================================
  nginx:
    image: nginx:1.24-alpine
    container_name: pathfinder-proxy
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    networks:
      - pathfinder-network
    profiles:
      - production

  # ==========================================
  # SSL 证书自动续期
  # ==========================================
  certbot:
    image: certbot/certbot:latest
    container_name: pathfinder-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    profiles:
      - production

  # ==========================================
  # 监控服务
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pathfinder-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pathfinder-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: pathfinder-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - pathfinder-network
    profiles:
      - monitoring

# ==========================================
# 网络配置
# ==========================================
networks:
  pathfinder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# 数据卷
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local